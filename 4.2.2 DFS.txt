//4.2.2 DFS
procedure DFSvisit(int G[], int nodes[], int u, int time)
    // The time is incremented and the node gets entry-timestamped 
    time += 1
    nodes[u][1] += time
    
    // end contains a pointer to the end of the wanted list
    local int end = 0
    if u = size(nodes) - 1 then
        // If we try to get the last list we stop at the end of the element list
        end += size(G)
    else
        // Or else, we stop where the next list starts
        end += nodes[u + 1][0]
    fi u = size(nodes) - 1
    
    // The adjacent nodes are checked and if they have not been visited, DFSvisit is called with the unvisited node
    local int r = nodes[u][0]
    from r = nodes[u][0] do
        if nodes[G[r]-1][1] = 0 then
            call DFSvisit(G, nodes, G[r]-1, time)
        fi nodes[G[r]-1][2] = time
        r += 1
    until r = end
    delocal int r = end
    
    // The time is incremented and the node gets exit-timestamped
    time += 1
    nodes[u][2] += time
    
    // end is delocated
    if u = size(nodes) - 1 then
        end -= size(G)
    else
        end -= nodes[u + 1][0]
    fi u = size(nodes) - 1
    delocal int end = 0

procedure DFS(int G[], int nodes[])
    local int time = 0, int i = 0
    
    from i = 0 do
        if nodes[i][1] = 0 then
            call DFSvisit(G, nodes, i, time)
        fi nodes[i][2] = time
        i += 1
    until i = size(nodes)

    delocal int time = size(nodes) * 2, int i = size(nodes)

procedure main()
    int G[10] = {2, 4, 1, 5, 4, 1, 3, 5, 2, 4}
    int nodes[5][3] = {{0}, {2}, {4}, {5}, {8}}
    
    call DFS(G, nodes)