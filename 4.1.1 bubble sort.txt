//4.1.1 Bubble sort
//unhygiene
procedure bsort(int a[], int n, stack gb)
    local int i = 0
    from i = 0
    loop local int j = n-1
        from j = n-1  loop
            if a[j] < a[j-1]  then
                a[j-1] <=> a[j]
                push(1,gb)
            else
               push(0,gb)
           fi top(gb) = 1
           j -= 1
       until j = i
       delocal int j = i
       i += 1
   until i = n
   delocal int i = n

//unfaithful
procedure bsort2(int a[], int n, int b[])
    local stack gb = nil
    call bsort(a,n,gb)
    call xcopyArray(a,b,n)
    uncall bsort(b,n,gb)
    delocal stack gb = nil

//unfaithful
procedure bsort3(int a[], int n, int p[])
    local stack gb = nil
    call bsort(a,n,gb)
    uncall bsort(p,n,gb)
    delocal stack gb = nil

procedure xcopyArray(int a[], int b[], int n)
    local int i = 0
    from i = 0 loop
        b[i] += a[i]
        i += 1
    until i = n
    
    delocal int i = n

procedure perm(int p[], int n)
    local int i = 0
    from i = 0 loop
        p[i] += i
        i += 1
    until i = n
    
    delocal int i = n

procedure bsort_hygiene(int a[], int n, int d[])
    local int i = 0
    from i = 0 loop
        local int j = n-1
        from j = n-1 loop
            if a[j] < a[j-1] then
                a[j-1] <=> a[j]
                d[j-i-1] += 1
            fi d[j-i-1] = i + 1
            j -= 1
        until j = i
        delocal int j = i
        i += 1
    until i = n
    delocal int i = n

procedure main()
    int a[] = {5,3,2,7,1,3,5}
    int n = size(a)
    int b[n] = {0}
    int p[n] = {0}
    int d[n] = {0}
    //stack gb
    //call bsort(a,n,gb)
    //call bsort2(a,n,b)
    //call perm(p,n)
    //call bsort3(a,n,p)
    
    call bsort_hygiene(a,n,d)
