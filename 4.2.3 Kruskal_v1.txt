//4.2.3 Kruskal Version 1
procedure mstkruskal(int G[], int edgecount, int A[])
    // Initialize variables for loop and findset
    local int i = 0, int ret = 0, int visit = 0
    local int visited[size(G)] = {0}
    
    //Gather all of the edges into a list
    local int edges[3][edgecount] = {{0},{0},{0}}
    call extractedges(G,edges,edgecount)
    //sort the edge list using quicksort
    local int p[edgecount] = {0}
    call id_perm(p,edgecount)
    call qsort(edges, 0, edgecount-1, p)
    
    from i = 0 do
        call findset(edges[1][i]-1,edges[2][i]-1,A,visited,visit,ret)
        if ret = 0 then
            uncall findset(edges[1][i]-1,edges[2][i]-1,A,visited,visit,ret)
            call addedge(edges[1][i]-1,edges[2][i]-1,edges[0][i],A)
        else
            uncall findset(edges[1][i]-1,edges[2][i]-1,A,visited,visit,ret)
        fi A[edges[1][i]-1][edges[2][i]-1] != 0
        i += 1
    until i = edgecount
    
    //delocal values
    uncall qsort(edges,0,edgecount-1,p)
    uncall id_perm(p, edgecount)
    delocal int p[edgecount] = {0}
    uncall extractedges(G, edges,edgecount)
    delocal int edges[3][edgecount] = {{0}, {0}, {0}} 
    delocal int visited[size(G)] = {0}
    delocal int i = edgecount, int ret = 0, int visit = 0

procedure extractedges(int G[], int edgelist[],int edgecount)
    local int i = 0, int j = 0, int s = 0
    from i = 0 do
        from j = i do
            if G[i][j] != 0 then
                edgelist[0][s] += G[i][j]
                edgelist[1][s] += i+1
                edgelist[2][s] += j+1
                s += 1
            fi G[i][j] != 0
            j += 1
        until j = size(G)
        i += 1
        j -= size(G) -i
    until i = size(G)
    delocal int i = size(G), int j = size(G), int s = edgecount

procedure findset(int a, int b, int array[], int visited[], int visit, int retval)
    // Visited and visit are used to keep track of which nodes have been visited
    // Once all nodes have been visited, we stop the recursion
    visited[a] += visit
    visit += 1
    if array[a][b] != 0 then
        retval += 1 // The element has been found, we return 1
    else
        local int i = 0
        from i = 0 do
            // Check for edges of current node a, call function recursively
            if array[a][i] != 0 && a != i && visited[i] = 0 && retval != 1 then
                call findset(i, b, array, visited, visit, retval)
            fi array[a][i] != 0 && a != i && visited[i] = visit
            i += 1
        until i = size(array)
        delocal int i = size(array)
    fi array[a][b] != 0
    visit -= 1

procedure addedge(int a, int b, int weight, int array[])
    array[a][b] += weight
    if a!= b then
        array[b][a] += weight //Symmetric edge only added when not in the diagonal
    fi a!= b
    
//use a[r] as a pivot, rearrange subarray[l..r] into a[l..q-1] a[q+1..r]
procedure partition(int a[][], int l, int r, int q, int p[])
  local int t[3][r-l] = {{0}}, int p_t[r-l] = {0}
    local int j = l
      from  j = l
      loop  if a[0][j] <= a[0][r] then
              q += 1
              a[0][q] <=> a[0][j]       // move a[j] to a[q]
              a[1][q] <=> a[1][j]
              a[2][q] <=> a[2][j]
              p[q] <=> p[j]       // move p[j] to p[q]
            else
              t[0][j-q-1] <=> a[0][j]   // move a[j] to t[j-q-1]
              t[1][j-q-1] <=> a[1][j]
              t[2][j-q-1] <=> a[2][j]
              p_t[j-q-1] <=> p[j] // move p[j] to p\_t[j-q-1]
            fi (q >= l) && (j-q-1 = -1 || p[q] > p_t[j-q-1])
            j += 1
      until j = r + 1
    delocal int j = r + 1
  
    local int k = 0
      from  k = 0                 // move t[0..r-q-1] to a[q+1..r]
      loop  a[0][q+1+k] <=> t[0][k]     // move t[k] to a[q+1+k]
            a[1][q+1+k] <=> t[1][k]
            a[2][q+1+k] <=> t[2][k]
            p[q+1+k] <=> p_t[k]   // move p_t[k] to p[q+1+k]
            k += 1
      until k = r - q
    delocal int k = r - q
  delocal int t[3][r-l] = {{0}}, int p_t[r-l] = {0}

procedure qsort(int a[][], int l, int r, int p[])
  if l < r then
    local int q = l - 1           // q remembers where to divide
      call partition(a,l,r,q,p)
      call qsort(a,l,q-1,p)
      call qsort(a,q+1,r,p)
      uncall max(q,p,l,r)         // zero clear q
    delocal int q = 0
  fi l < r

// xor-copy to p the index of the maximum of ord[l..r]
procedure max(int p, int ord[], int l, int r)
  local stack gb = nil
    local int m = 0
      call max_sub(m,ord,l,r,gb)
      p ^= m
      uncall max_sub(m,ord,l,r,gb)
    delocal int m = 0
  delocal stack gb = nil

procedure max_sub(int m, int ord[], int l, int r, stack gb)
  m ^= l
  local int i = l + 1
    from  i = l + 1
    loop  if ord[i] >= ord[m] then
            push(m,gb)
            m ^= i
            push(1,gb)
          else
            push(0,gb)
          fi top(gb) = 1
          i += 1
    until i = r + 1
  delocal int i = r + 1
// Setting to p[] identity permutation of length n
procedure id_perm(int p[], int n)
  local int i = 0
    from  i = 0
    loop  p[i] ^= i
          i += 1
    until i = n
  delocal int i = n
  
procedure main()
    int G[][] = {{0,4,0,0,0,0,0,8,0},{4,0,8,0,0,0,0,11,0},{0,8,0,7,0,4,0,0,2},{0,0,7,0,9,14,0,0,0},{0,0,0,9,0,10,0,0,0},{0,0,4,14,10,0,2,0,0},{0,0,0,0,0,2,0,1,6},{8,11,0,0,0,0,1,0,7},{0,0,2,0,0,0,6,7,0}}
    int A[9][9] = {{0}}
    call mstkruskal(G,14,A)
