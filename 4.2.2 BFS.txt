//4.2.1 BFS
procedure main()
    int G[10] = {2, 4, 1, 5, 4, 1, 3, 5, 2, 4}
    int nodes[5][3] = {{0}, {2}, {4}, {5}, {8}}
    int s = 1
    
    call BFS(G, nodes, s)

procedure copy(int inputarray[], int outputarray[], int index)
    local int i = 0
    from i = 0 do
        outputarray[i][index] += inputarray[i][index]
        i += 1
    until i = size(inputarray)
    
    delocal int i = size(inputarray)
    
procedure BFS(int G[], int nodes[], int headpointer, int tailpointer, int queue[], int store, int adj[], int adjstore, int order[], int i)
    from headpointer = 0 do
        if queue[headpointer] != 0 then
            // We dequeue a node and gets its adjacency list
            call dequeue(queue, headpointer, store)
            call getlist(G, nodes, store-1, adj)
            order[headpointer] += store

            //We check the list and enqueue all unvisited nodes
            from i = 0 do
                if adj[i] = 0 then
                    skip
                else
                    if nodes[adj[i]-1][1] = 0 then
                        adjstore += adj[i]
                        nodes[adj[i]-1][1] += store
                        call enqueue(queue, tailpointer, adjstore)
                    fi nodes[adj[i]-1][1] = store
                fi adj[i] = 0
                i += 1
            until i = size(adj)
            
            i -= size(adj)
            
            // Remove the content from adj and store
            uncall getlist(G, nodes, store-1, adj)
            store -= order[headpointer]
        fi queue[headpointer] != 1
    until headpointer = tailpointer

procedure BFS(int G[], int nodes[], int s)
    local int order[size(nodes)+1] = {0}, int headpointer = 0
    // FIFO queue
    local int queue[size(G)] = {0}, int tailpointer = headpointer
    // Storage for dequeued node and adjacent nodes, loopcounter
    local int store = 0, int adjstore = 0, int i = 0
    local int adj[size(G)] = {0} // Stores the current adjacent nodes
    local int tmp[size(nodes)][2] = {{0}}

    call copy(nodes, tmp, 0)

    // We mark the current node as the source node and enqueue it
    tmp[s-1][1] -= 1
    store += s
    call enqueue(queue, tailpointer, store)

    call BFS(G, tmp, headpointer, tailpointer, queue, store, adj, adjstore, order, i)

    call copy(tmp, nodes, 1)
    show(order)

    uncall BFS2(G, tmp, headpointer, tailpointer, queue, store, adj, adjstore, order, i)

    uncall copy(nodes, tmp, 0)

    uncall enqueue(queue, tailpointer, store)
    store -= s
    tmp[s-1][1] += 1

    // Delocal local variables
    delocal int tmp[size(nodes)][2] = {{0}}
    delocal int adj[size(G)] = {0}
    delocal int store = 0, int adjstore = 0, int i = 0
    delocal int queue[size(G)] = {0}, int tailpointer = headpointer
    delocal int order[size(nodes)+1] = {0}, int headpointer = 0

procedure getlist(int G[], int nodes[], int i, int res[])
// end contains a pointer to the end of the wanted list
    local int end = 0
    if i = (size(nodes) - 1) then
    	// If we try to get the last list we stop at the end of the element list
        end += size(G)
	else
		// Or else, we stop where the next list start
        end += nodes[i + 1][0]
	fi i = (size(nodes) - 1)

	// All elements of the wanted list are loaded into res
	local int r = nodes[i][0]
	from r = nodes[i][0] do
		res[r - nodes[i][0]] += G[r]
		r += 1
	until r = end
	delocal int r = end

	// end is delocated
	if i = (size(nodes) - 1) then
		end -= size(G)
	else
		end -= nodes[i + 1][0]
	fi i = (size(nodes) - 1)
	delocal int end = 0

procedure enqueue(int queue[], int tailpointer, int item)
// Error checks (input)
    if item = 0 then
    	error("Item added to queue is empty (0).")
	fi item = 0
	if queue[tailpointer] != 0 then
		error("Queue is full. Cannot enqueue item.")
	fi queue[tailpointer] != 0

	// Adds the item to the queue spot and empties the item
	local int tmp = item
		queue[tailpointer] += tmp
		item -= tmp
	delocal int tmp = queue[tailpointer]

	// Goes to next queue spot
	if tailpointer + 1 != size(queue) then
		tailpointer += 1
	else
		tailpointer -= size(queue) - 1
	fi tailpointer != 0

procedure dequeue(int queue[], int headpointer, int placeholder)
// Error checks (input)
    if placeholder != 0 then
		error("Placeholder not empty (0).")
	fi placeholder != 0
	if queue[headpointer] = 0 then
		error("Queue is empty. Tried to remove item from empty queue.")
	fi queue[headpointer] = 0

	// Loads the queue item into the placeholder and empties the queue spot
	local int tmp = queue[headpointer]
		placeholder += tmp
		queue[headpointer] -= tmp
	delocal int tmp = placeholder

	// Goes to next queue spot
	if headpointer + 1 != size(queue) then
		headpointer += 1
	else
		headpointer -= size(queue) - 1
	fi headpointer != 0